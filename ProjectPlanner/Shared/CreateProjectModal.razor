@using ProjectPlanner.UIModels;
@using ProjectPlanner.Data
@inject IHttpContextAccessor httpContextAccessor
@inject ApplicationDbContext context;
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject Logger.Logger logger

<div class="modal modal-dialog-centered" id="exampleModal" tabindex="-1" role="dialog" style="display: block;">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" style="font-weight: bold;">Create a new project</h5>
      </div>
      <div class="modal-body">
        <form>
          <div class="row mb-3">
            <label for="NameInput" class="col-sm-2 col-form-label" style="font-weight: bold;">Name</label>
            <div class="col-sm-10">
              <input type="text" class="form-control" @bind="ProjectInput.Name" @bind:event="oninput" id="NameInput">
            </div>
          </div>
          <div class="row mb-3">
            <label for="DescriptionInput" class="col-sm-2 col-form-label" style="font-weight: bold;">Description
            </label>
            <div class="col-sm-10">
              <input type="text" class="form-control" @bind="ProjectInput.Description" @bind:event="oninput"
                id="DescriptionInput">
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="OnClose">Close</button>
        <button type="button" class="btn btn-primary" @onclick="OnSave">Save changes</button>
      </div>
    </div>
  </div>
</div>



@code {
  [Parameter]
  public EventCallback OnClose { get; set; }
  public UIModels.Project ProjectInput { get; set; }

  public MyUser User { get; set; }
  protected override async Task OnInitializedAsync()
  {
    ProjectInput = new UIModels.Project();
    var userName = httpContextAccessor.HttpContext.User.Identity.Name;
    var users = context.Users;
    User = users.FirstOrDefault(user => user.UserName == userName);
  }
  public async void OnSave()
  {
    var project = new Data.Project()
    {
      Name = ProjectInput.Name,
      Description = ProjectInput.Description
    };
    User.Projects.Add(project);
    context.SaveChanges();
    logger.LogProjectCreation(project.Id, User.UserName, project.Name);
    await OnClose.InvokeAsync();
    navigationManager.NavigateTo($"/{project.Id}");
  }
}