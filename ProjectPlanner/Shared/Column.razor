@using ProjectPlanner.Data
@using Microsoft.EntityFrameworkCore;
@inject ApplicationDbContext context

<AuthorizeView>
    <Authorized>
        @if (ModalVisible)
        {
            <CreateTicketModal OnClose=@CloseModal ColumnId=@ColumnIdInt />
        }
        <div class="wrapper border border-dark">
            <p class="column-name">@CurrentColumn.Name</p>
            <div class="tickets-container">
                @foreach (var ticket in CurrentTickets)
                {
                    <Ticket CurrentTicket="ticket" />
                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>
<style>
    .wrapper {
        height: 500px;
        min-width: 300px;
        background-color: white;

    }

    .tickets-container {
        overflow-y: auto;
    }

    .column-name {
        color: black;
        opacity: 100%;
        text-align: center;
        border: solid 1px black;
        font-weight: bold;
    }
</style>

@code {
    [Parameter]
    public Data.Column CurrentColumn { get; set; }
    [Parameter] public string ColumnId { get; set; }
    public List<Data.Ticket> CurrentTickets { get; set; }
    public int ColumnIdInt { get; set; }
    public bool ModalVisible { get; set; } = false;

    protected override void OnParametersSet()
    {
        ColumnIdInt = Int32.Parse(ColumnId);
        CurrentColumn = context.Columns
        .Include(c => c.Tickets)
        .FirstOrDefault(p => p.Id == ColumnIdInt);
    }

    public void CloseModal()
    {
        ModalVisible = false;
    }

    public void OnAdd()
    {
        ModalVisible = true;
    }
    protected override async Task OnInitializedAsync()
    {
        var column = context.Columns
        .Include(c => c.Tickets)
        .FirstOrDefault(c => c.Id == CurrentColumn.Id);
        CurrentTickets = column.Tickets;
    }

}