@using ProjectPlanner.Data
@inject IHttpContextAccessor httpContextAccessor
@inject ApplicationDbContext context;
@inject Logger.Logger logger

<div class="modal modal-dialog-centered" id="exampleModal" tabindex="-1" role="dialog" style="display: block;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" style="font-weight: bold;">Create a new column</h5>
            </div>
            <div class="modal-body">
                <form>
                    <div class="row mb-3">
                        <label for="NameInput" class="col-sm-2 col-form-label" style="font-weight: bold;">Name</label>
                        <div class="col-sm-10">
                            <input type="text" class="form-control" @bind="@ColumnName" @bind:event="oninput"
                                id="NameInput">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="OnClose">Close</button>
                <button type="button" class="btn btn-primary" @onclick="OnSave">Save changes</button>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public int ProjectId { get; set; }

    public string ColumnName { get; set; }
    protected override async Task OnInitializedAsync()
    {
        ColumnName = "";
    }
    public async void OnSave()
    {
        Project project = context.Projects.FirstOrDefault(p => p.Id == ProjectId);
        Data.Column column = new Data.Column()
        {
            Name = ColumnName
        };
        project.Columns.Add(column);
        context.SaveChanges();
        var currentUser = httpContextAccessor.HttpContext.User.Identity.Name;
        logger.LogColumnCreation(project.Id, currentUser, column.Name);
        await OnClose.InvokeAsync();
    }
}