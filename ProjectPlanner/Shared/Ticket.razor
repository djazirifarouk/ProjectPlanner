@using ProjectPlanner.Data
@using Microsoft.EntityFrameworkCore;
@inject ApplicationDbContext context

<div class="card">
    <div class="card-header @headerColor">
        <div class="row justify-content-between">
            <div class="col">
                Priority @CurrentTicket.Priority
            </div>
            <div class="col">
                <button href="#" class="btn btn-primary btn-sm">Edit</button>
                <button href="#" class="btn btn-dark btn-sm">X</button>
            </div>
        </div>
    </div>
    <div class="card-body">
        <h5 class="card-title">@CurrentTicket.Name</h5>
        <p class="card-text">@CurrentTicket.Description</p>
        @foreach (var tag in CurrentTags)
        {
            <div class="mx-2">
                <span class="badge @tag.Color">tag.Name</span>
            </div>
        }
        <p class="text-danger">@CurrentTicket.DueDate</p>
    </div>
</div>

<style>

</style>

@code {
    [Parameter]
    public Data.Ticket CurrentTicket { get; set; }
    public List<Data.Tag> CurrentTags { get; set; }
    public List<Data.Item> CurrentChecklist { get; set; }
    public string headerColor = "";

    protected override async Task OnInitializedAsync()
    {
        var ticket = context.Tickets
        .Include(t => t.Tags)
        .Include(t => t.Checklist)
        .FirstOrDefault(t => t.Id == CurrentTicket.Id);
        CurrentTags = ticket.Tags;
        CurrentChecklist = ticket.Checklist;
        switch (ticket.Priority)
        {
            case 1:
                headerColor = "bg-danger";
                break;
            case 2:
                headerColor = "bg-warning";
                break;
            case 3:
                headerColor = "bg-info";
                break;
            case 4:
                headerColor = "bg-secondary";
                break;
        }
    }

    public void DeleteTicket()
    { /*
var ticketContext = context.Tickets;
Data.Column selectedTicket = ticketContext.FirstOrDefault(t => t.Id == CurrentTicket.Id);
Tickets.Remove(ticket);
context.SaveChanges();
await OnClose.InvokeAsync();
*/
    }
}
