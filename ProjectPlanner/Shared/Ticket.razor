@using ProjectPlanner.Data
@using Microsoft.EntityFrameworkCore;
@inject ApplicationDbContext context
@inject IHttpContextAccessor httpContextAccessor
@inject Logger.Logger logger


<div class="card draggable" draggable="true" style="border : solid 1px gray">
    <div class="card-header @headerColor">
        <div class="d-flex flex-row justify-content-between align-items-center">
            <div style="font-weight: bold;">
                @CurrentTicket.Name
            </div>
            <div class="">
                <button href="#" class="btn btn-dark btn-sm" @onclick=@DeleteTicket>X</button>
            </div>
        </div>
    </div>
    <div class="card-body">
        <p class="card-text">@CurrentTicket.Description</p>
        @foreach (Data.Tag tag in CurrentTags)
        {
            <div class="mx-2">
                <span class="badge @tag.Color">tag.Name</span>
            </div>
        }
        <p class="text-danger">@CurrentTicket.DueDate</p>
    </div>
</div>

<style>

</style>

@code {
    [Parameter]
    public Data.Ticket CurrentTicket { get; set; }
    [Parameter]
    public int ProjectId { get; set; }
    [Parameter]
    public EventCallback OnRemoval { get; set; }
    public List<Data.Tag> CurrentTags { get; set; }
    public List<Data.Item> CurrentChecklist { get; set; }
    public string headerColor = "";

    public bool EditTicketModalVisible { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var ticket = context.Tickets
        .Include(t => t.Tags)
        .Include(t => t.Checklist)
        .FirstOrDefault(t => t.Id == CurrentTicket.Id);
        CurrentTags = ticket.Tags;
        CurrentChecklist = ticket.Checklist;
        switch (ticket.Priority)
        {
            case 1:
                headerColor = "bg-danger";
                break;
            case 2:
                headerColor = "bg-warning";
                break;
            case 3:
                headerColor = "bg-info";
                break;
            case 4:
                headerColor = "bg-secondary";
                break;
        }
    }

    public async void DeleteTicket()
    {
        var ticketContext = context.Tickets;
        Data.Ticket selectedTicket = ticketContext.FirstOrDefault(t => t.Id == CurrentTicket.Id);
        ticketContext.Remove(selectedTicket);
        context.SaveChanges();
        var currentUser = httpContextAccessor.HttpContext.User.Identity.Name;
        logger.LogTicketRemoval(ProjectId, currentUser, CurrentTicket.Name);
        await OnRemoval.InvokeAsync();
    }
}